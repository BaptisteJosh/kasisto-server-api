{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "Kasisto API",
    "description": "Kasisto Enterprise API",
    "contact": {
      "name": "Kasisto API team",
      "email": "info@kasisto.com",
      "url": "http://kasisto.com"
    }
  },
  "host": "localhost:8000",
  "basePath": "/api",
  "schemes": [
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "tags": [
    {"name":"Customer"},
    {"name":"Accounts"},
    {"name":"Transactions"},
    {"name":"Transfers"},
    {"name":"Payments"},
    {"name":"Bank Locations"}
  ],
  "paths": {
    "/token": {
      "post": {
        "x-name":"Token",
        "tags":["Customer"],
        "description": "Get access token for a customer",
        "parameters": [
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name": "token_credentials",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/token_credentials"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token response",
            "schema": {
              "$ref":"#/definitions/token_response"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/validate_otp":{
      "post":{
        "x-name":"Validate OTP",
        "tags":["Customer"],
        "description":"Validate One-Time Password and return new user token",
        "parameters":[
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"validate_otp_request",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/validate_otp_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "token response",
            "schema": {
              "$ref":"#/definitions/validate_otp_response"
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "451":{
            "description":"Invalid One-Time Password",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "452":{
            "description":"Expired One-Time Password",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "453":{
            "description":"Too Many One-Time Password Failures",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/customer": {
      "post": {
        "x-name":"Customer",
        "tags":["Customer"],
        "description": "Get customer object",
        "parameters": [
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name": "customer_request",
            "in":"body",
            "required": true,
            "schema":{
              "$ref":"#/definitions/customer_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "customer response",
            "schema": {
              "$ref": "#/definitions/customer"
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "450":{
            "description":"One-Time Password is required",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "x-name":"Accounts",
        "tags":["Accounts"],
        "description": "Get customer accounts",
        "parameters": [
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string",
            "x-example": "91ff6deb-3aac-4f38-890c-390afb52a656"
          },
          {
            "name": "accounts_request",
            "in":"body",
            "required": true,
            "schema":{
              "$ref":"#/definitions/accounts_request",
              "example": {
                "account_id": "98927d5be608d4a1652d493e85e74637cac066be29d77e9f39026b419faafeb3"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "accounts response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/account"
              }
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "450":{
            "description":"One-Time Password is required",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/transactions": {
      "post": {
        "x-name":"Transactions",
        "tags":["Transactions"],
        "description": "Search customer transactions",
        "parameters": [
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string",
            "x-example": "91ff6deb-3aac-4f38-890c-390afb52a656"
          },
          {
            "name":"transaction_criteria",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/transaction_criteria",
              "example": {
                "account_ids": "98927d5be608d4a1652d493e85e74637cac066be29d77e9f39026b419faafeb3",
                "start_date": "2015-05-01",
                "end_date": "2016-11-03"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "transactions",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/transaction"
              }
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "450":{
            "description":"One-Time Password is required",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/bank_locations": {
      "post": {
        "x-name":"Bank Locations",
        "tags":["Bank Locations"],
        "description": "Search for bank locations",
        "parameters": [
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"bank_locations_criteria",
            "in":"body",
            "required":true,
            "schema":{
              "$ref":"#/definitions/bank_locations_criteria"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "bank_locations",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/bank_location"
              }
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "450":{
            "description":"One-Time Password is required",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/payment":{
      "post":{
        "x-name":"Payment",
        "tags":["Payments"],
        "description":"Pay funds to a payee",
        "parameters":[
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"payment_request",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/payment_request"
            }
          }

        ],
        "responses": {
          "200": {
            "description": "payment response",
            "schema": {
              "$ref": "#/definitions/payment"
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "450":{
            "description":"One-Time Password is required",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/transfer":{
      "post":{
        "x-name":"Transfer",
        "tags":["Transfers"],
        "description":"Transfer funds between two accounts",
        "parameters":[
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"transfer_request",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/transfer_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "transfer response",
            "schema": {
              "$ref": "#/definitions/transfer"
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "450":{
            "description":"One-Time Password is required",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/payees": {
      "post": {
        "x-name":"Payees",
        "tags":["Payments"],
        "description": "Get list of payees for a user",
        "parameters":[
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"payees_request",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/payees_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "payees response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/payee"
              }
            },
            "headers": {
              "token": {
                "description": "Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "x-name":"Categories",
        "tags":["Transactions"],
        "description": "Get transaction categories",
        "parameters":[
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"categories_request",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/categories_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "categories response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/category"
              }
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    },
    "/merchants": {
      "post": {
        "x-name":"Merchants",
        "tags":["Transactions"],
        "description": "Get merchants",
        "parameters":[
          {
            "name":"secret",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"token",
            "in":"header",
            "required":true,
            "type":"string"
          },
          {
            "name":"merchants_request",
            "in":"body",
            "schema":{
              "$ref":"#/definitions/merchants_request"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "merchants response",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/merchant"
              }
            },
            "headers":{
              "token":{
                "description":"Valid auth token for subsequent requests if using SSO tokens",
                "type":"string"
              }
            }
          },
          "401": {
            "description": "Authentication Failed",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "403": {
            "description": "Access Denied",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "500": {
            "description": "Server Error",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          },
          "501": {
            "description": "Not Implemented",
            "schema":{
              "$ref":"#/definitions/error_response"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "error_response":{
      "type":"object",
      "properties":{
        "message":{
          "type":"string"
        },
        "code":{
          "type":"string"
        },
        "display_message_id":{
          "type":"string"
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "merchants_request":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        }
      }
    },
    "payees_request":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        }
      }
    },
    "categories_request":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        }
      }
    },
    "transfer_request":{
      "type":"object",
      "required": [ "source_account_id", "dest_account_id", "amount" ],
      "properties":{
        "source_account_id":{
          "description": "source account of transfer",
          "type": "string"
        },
        "dest_account_id":{
          "description": "destination account of transfer",
          "type": "string"
        },
        "amount":{
          "description": "amount of transfer",
          "type":"number",
          "format":"float"
        },
        "currency_code":{
          "description": "currency of amounts (USD, etc.)",
          "type": "string"
        },
        "date":{
          "description": "date of transfer",
          "type":"string",
          "format":"date-time"
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "payment_request": {
      "type":"object",
      "required": [ "source_account_id", "payee_id", "amount" ],
      "properties": {
        "source_account_id": {
          "description": "source account of payment",
          "type": "string"
        },
        "payee_id": {
          "description": "destination payee of payment",
          "type": "string"
        },
        "amount": {
          "description": "amount of transfer",
          "type":"number",
          "format":"float"
        },
        "currency_code":{
          "description": "currency of amounts (USD, etc.)",
          "type": "string"
        },
        "date": {
          "description": "date of payment",
          "type": "string",
          "format": "date"
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "accounts_request": {
      "type": "object",
      "properties":{
        "user_id":{
          "type":"string"
        },
        "account_id":{
          "type":"string"
        }
      }
    },
    "customer_request":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        }
      }
    },
    "validate_otp_request":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        },
        "otp":{
          "type":"string"
        }
      }
    },
    "validate_otp_response":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        },
        "token":{
          "type":"string"
        }
      }
    },
    "token_credentials":{
      "type":"object",
      "properties":{
        "username":{
          "type":"string"
        },
        "password":{
          "type":"string"
        }
      }
    },
    "token_response":{
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "transaction_criteria":{
      "type":"object",
      "properties":{
        "user_id":{
          "type":"string"
        },
        "account_ids":{
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "limit":{
          "type":"integer",
          "format":"int32"
        },
        "start_date":{
          "type":"string",
          "format":"date"
        },
        "end_date":{
          "type":"string",
          "format":"date"
        }
      }
    },
    "bank_locations_criteria":{
      "type":"object",
      "properties":{
        "location":{
            "$ref":"#/definitions/location"
        }
      }
    },
    "meta_field":{
      "type":"object",
      "required": [ "name", "value" ],
      "properties":{
        "name":{
          "description":"Name of data field",
          "type":"string"
        },
        "value":{
          "description":"Value of data field",
          "type":"string"
        }
      }
    },
    "location":{
      "type":"object",
      "properties":{
        "address":{
          "description":"Street address of merchant",
          "type":"string"
        },
        "city":{
          "description":"City of merchant",
          "type":"string"
        },
        "state":{
          "description":"State of merchant",
          "type":"string"
        },
        "zip":{
          "description":"Postal code of merchant",
          "type":"string"
        },
        "coordinates":{
          "$ref":"#/definitions/coordinates"
        }
      }
    },
    "coordinates":{
      "type":"object",
      "required": [ "lat", "long" ],
      "properties":{
        "lat":{
          "description":"Latitude of merchant location",
          "type":"number",
          "format":"float"
        },
        "long":{
          "description":"Longitude of merchant location",
          "type":"number",
          "format":"float"
        }
      }
    },
    "customer": {
      "type": "object",
      "properties": {
        "user_id": {
          "type": "string"
        },
        "full_name": {
          "type": "string"
        },
        "first_name": {
          "type": "string"
        },
        "last_name": {
          "type": "string"
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "transfer": {
      "type": "object",
      "properties": {
        "transfer_id": {
          "type": "string"
        },
        "reference_number": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "processed",
            "pending",
            "cancelled",
            "failed",
            "unspecified"
          ]
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "payment": {
      "type": "object",
      "properties": {
        "payment_id": {
          "type": "string"
        },
        "reference_number": {
          "type": "string"
        },
        "status": {
          "type": "string",
          "enum": [
            "processed",
            "pending",
            "cancelled",
            "failed",
            "unspecified"
          ]
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "account": {
      "type": "object",
      "properties": {
        "account_id": {
          "description": "internal ID used by bank for transaction search API",
          "type": "string"
        },
        "account_number": {
          "description": "number used by kasisto - may be masked",
          "type": "string"
        },
        "account_name": {
          "description": "account name",
          "type": "string"
        },
        "account_nickname": {
          "description": "account nickname",
          "type": "string"
        },
        "account_type": {
          "description": "checking,savings,loan,credit_card, etc.",
          "type": "string",
          "enum": [
            "cd",
            "checking",
            "credit_card",
            "heloc",
            "ira",
            "investment",
            "loc",
            "loan",
            "money_market",
            "mortgage",
            "overdraft_protection",
            "sloc",
            "savings",
            "wire",
            "p2p_payment",
            "unspecified"
          ]
        },
        "currency_code": {
          "description": "currency of amounts (USD, etc.)",
          "type": "string"
        },
        "available_balance": {
          "type": "number",
          "format":"float"
        },
        "current_balance": {
          "type": "number",
          "format":"float"
        },
        "available_credit": {
          "description": "(for credit_card only)",
          "type": "number",
          "format":"float"
        },
        "credit_limit": {
          "description": "(for credit_card only)",
          "type": "number",
          "format":"float"
        },
        "payment_due_date": {
          "description": "(for credit_card and loan)",
          "type": "string",
          "format":"date"
        },
        "payment_due_amount": {
          "description": "(for credit_card and loan)",
          "type": "number",
          "format":"float"
        },
        "minimum_payment_due_amount": {
          "description": "(for credit_card and loan)",
          "type": "number",
          "format":"float"
        },
        "interest_rate": {
          "description": "Interest rate if applicable",
          "type": "number",
          "format":"float"
        },
        "can_transfer_to": {
          "description": "True if account is a valid transfer destination",
          "type": "boolean"
        },
        "can_transfer_from": {
          "description": "True if account is a valid transfer source",
          "type": "boolean"
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "transaction": {
      "type": "object",
      "properties": {
        "account_id": {
          "description": "ID of account transaction is from",
          "type": "string"
        },
        "transaction_id": {
          "description": "ID of this transaction",
          "type": "string"
        },
        "title": {
          "description": "Short description of transaction",
          "type":"string"
        },
        "description": {
          "description": "Description of transaction",
          "type":"string"
        },
        "transaction_type": {
          "description": "Type of transaction",
          "type": "string",
          "enum": [
            "atm",
            "cash",
            "check",
            "check_deposit",
            "credit",
            "debit",
            "fee",
            "dividend",
            "interest",
            "unspecified"
          ]
        },
        "amount": {
          "description": "Amount of transaction (can be positive or negative)",
          "type": "number",
          "format":"float"
        },
        "currency_code": {
          "description": "Currency type of the amount",
          "type": "string"
        },
        "categories": {
          "description": "Category of transaction if provided",
          "type": "array",
          "items":{
            "type":"string"
          }
        },
        "merchant": {
          "description": "Merchant or vendor of transaction if provided",
          "type": "string"
        },
        "location":{
          "$ref":"#/definitions/location"
        },
        "status": {
          "description": "Status of transaction",
          "type": "string",
          "enum": [
            "posted",
            "pending",
            "cancelled",
            "unspecified"
          ]
        },
        "check_number": {
          "description": "Check number of transaction is a check",
          "type": "integer",
          "format":"int32"
        },
        "transaction_date": {
          "description": "Date of transaction",
          "type": "string",
          "format":"date-time"
        },
        "post_date": {
          "description": "Date of transaction",
          "type": "string",
          "format":"date-time"
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "bank_location": {
      "type": "object",
      "properties": {
        "location_id": {
          "description": "The id of this",
          "type": "string"
        },
        "location_type": {
          "description": "The type of point of interest it is",
          "type": "string",
          "enum": [
            "atm",
            "bank",
            "bank+atm"
          ]
        },
        "location_name": {
          "description": "The name of this",
          "type": "string"
        },
        "location_url": {
          "description": "The url of this",
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/location"
        },
        "phone_number": {
          "description": "The phone number of this location",
          "type": "string"
        },
        "distance": {
          "description": "Distance to this location",
          "type": "string"
        },
        "number_of_atms": {
          "description": "Number of ATMs at location",
          "type": "integer",
          "format": "int32"
        },
        "atm_hours": {
          "description": "Expected hours for the ATM",
          "type": "string"
        },
        "atm_deposit_cutoff": {
          "description": "When deposits are picked up from the ATM each day",
          "type": "array",
          "items": {
              "$ref":"#/definitions/day_hours"
          }
        },
        "bank_deposit_cutoff": {
          "description": "When deposits are picked up from the Bank each day",
          "type": "array",
          "items": {
              "$ref":"#/definitions/day_hours"
          }
        },
        "atm_languages": {
          "description": "Array of languages used at the ATM",
          "type": "array",
          "items": {
              "type": "string"
          }
        },
        "teller_languages": {
          "description": "Array of languages used by the Tellers",
          "type": "array",
          "items": {
              "type": "string"
          }
        },
        "atm_services": {
          "description": "Array of services supported at the ATM",
          "type": "array",
          "items": {
              "type": "string"
          }
        },
        "bank_services": {
          "description": "Array of services supported at the Bank",
          "type": "array",
          "items": {
              "type": "string"
          }
        },
        "holiday_hours": {
          "description": "Array of holidays with closing times",
          "type": "array",
          "items": {
              "$ref":"#/definitions/day_hours"
          }
        },
        "lobby_hours": {
          "description": "Hours of operation for each day of the week",
          "type": "array",
          "items": {
              "$ref":"#/definitions/day_hours"
          }
        }
      }
    },
    "day_hours": {
      "type": "object",
      "required": [ "day" ],
      "properties": {
        "day": {
          "description": "The day associated with the event (could be a holiday name or a day of the week)",
          "type": "string"
        },
        "hours": {
          "$ref":"#/definitions/hours"
        }
      }
    },
    "hours": {
      "type": "object",
      "properties": {
        "start": {
          "description": "Start time for a range of hours in 24 hour format as an integer.",
          "type": "integer",
          "format": "int32"
        },
        "end": {
          "description": "End time for a range of hours in 24 hour format as an integer.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "merchant": {
      "type": "object",
      "properties": {
        "merchant_id": {
          "description": "ID of merchant",
          "type": "string"
        },
        "name": {
          "description": "Name of merchant",
          "type": "string"
        },
        "alias":{
          "description":"Optional alternative names for this merchant",
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "category": {
      "type": "object",
      "properties": {
        "category_id": {
          "description": "ID of transaction category",
          "type": "string"
        },
        "name": {
          "description": "Name of transaction category",
          "type": "string"
        },
        "alias":{
          "description":"Optional alternative names for this category",
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    },
    "payee": {
      "type": "object",
      "properties": {
        "payee_id": {
          "description": "ID of payee",
          "type": "string"
        },
        "name": {
          "description": "Name of payee",
          "type": "string"
        },
        "alias":{
          "description":"Optional alternative names for this payee",
          "type":"array",
          "items":{
            "type":"string"
          }
        },
        "meta": {
          "description": "Optional data if needed for application",
          "type": "array",
          "items":{
            "$ref": "#/definitions/meta_field"
          }
        }
      }
    }
  }
}
